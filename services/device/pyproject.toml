[tool.poetry]
name = "device"
version = "0.1.2"
description = "The device runtime for the Carlos Edge Computing Platform"
authors = ["Felix FanghÃ¤nel"]
readme = "README.md"
license = "MIT"
exclude = ["**/*_test.py", "**/conftest.py", "**/test/**"]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
"carlos.edge.device" = {path = "../../lib/py_edge_device"}
websockets = "^12.0"
pydantic-settings = "^2.2.1"
httpx = "^0.27.0"
# CLI tooling
typer = "^0.12.0"
rich = "^13.7.1"
sentry-sdk = {extras = ["sqlalchemy", "loguru",], version = "^2.0.1"}

[tool.poetry.group.dev.dependencies]
"devtools" = {path = "../../lib/py_dev_dependencies", develop = true}
"carlos.edge.device" = {path = "../../lib/py_edge_device", develop = true}

[tool.poetry.scripts]
carlos-device = "device.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.bumpversion]
current_version = "0.1.2"
commit = true
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\-(?P<prerelease>[a-z0-9\\.]+))?"
serialize = [
	"{major}.{minor}.{patch}-{prerelease}",
	"{major}.{minor}.{patch}",
]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88

[tool.mypy]
plugins = [
    "sqlalchemy.ext.mypy.plugin",
    "pydantic.mypy"
]
exclude = ['.*_test\.py$']

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "def __hash__",
    # Don't complain if imports are not covered:
    "^import .*",
    "^from .* import .*",
    "__all__ = .*",
    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about guard clauses
    "if __name__ == .__main__.:",
]
omit = [
    # omit all tests
    "*_test.py",
]
