{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> \ud83c\udf31 Your friendly greenhouse manager. \ud83c\udf31 </p> <p> </p> <p>Documentation: https://fanghanel.dev/carlos</p> <p>Source Code: https://github.com/flxdot/carlos</p>"},{"location":"#welcome-to-carlos","title":"Welcome to Carlos","text":"<p>Carlos is a personal project to control and automate my greenhouse.</p>"},{"location":"developer-guide/","title":"Developer Documentation","text":""},{"location":"developer-guide/docs/","title":"Carlos Documentation","text":"<p>This documentation is build with MkDocs using the Material for MkDocs theme.</p>"},{"location":"developer-guide/docs/#writing-documentation","title":"Writing documentation","text":"<p>To write documentation you need a basic understanding of the markdown syntax. For some advanced usage we recommend having a look at Reference - Material for MkDocs.</p>"},{"location":"developer-guide/docs/#usage","title":"Usage","text":"<p>Make sure to have python and poetry installed. To initialize your environment for this service run <code>poetry install</code>.</p> <p>To show the documentation in your browser run the following command. Any updates done to the project will be automatically reloaded.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developer-guide/docs/#deployment","title":"Deployment","text":"<p>To build the docs run</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"developer-guide/links/","title":"Links","text":"<p>This page is a loose collection of helpful articles, blog posts, and other resources that I've found useful in my journey to implement this project.</p>"},{"location":"developer-guide/links/#deployment","title":"Deployment","text":"<ul> <li>An Elegant way to use docker-compose to obtain and renew a Let\u2019s Encrypt SSL certificate with Certbot and configure the NGINX service to use it</li> <li>From Python to Daemon: How to Turn Your Python App into a Linux Service Controlled by Systemd</li> <li>How To Run / Execute Command Using SSH</li> </ul>"},{"location":"developer-guide/links/#python","title":"Python","text":"<ul> <li>Make blocking I/O code async</li> </ul>"},{"location":"developer-guide/links/#frontend","title":"Frontend","text":"<ul> <li>Chart.js Tutorial \u2014 How To Make Gradient Line Chart</li> <li>Customising an iOS home screen web app in 2021</li> </ul>"},{"location":"developer-guide/links/#websockets","title":"Websockets","text":"<ul> <li>Websocket Authentication</li> </ul>"},{"location":"developer-guide/links/#apis","title":"APIs","text":"<ul> <li>Open Weather Map</li> </ul>"},{"location":"developer-guide/links/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>Install headless Debian on Raspberry Pi without Display</li> </ul>"},{"location":"developer-guide/links/#hardware","title":"Hardware","text":"<ul> <li><code>IP56 box cable transparent</code></li> <li><code>Kabeldurchf\u00fchrung IP68</code></li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Carlos uses two entities to operate: the Carlos Server and the Carlos Device.</p> <p>The Carlos Server is a (preferably) Linux machine that runs the main application stack. This includes the web server, the database, and the API. For an installation guide, see the Carlos Server (Linux) page.</p> <p>The Carlos Device is a (preferably) a Raspberry Pi that collects sensor data from within the greenhouse, sends it to the server, and receives commands from the server to control the greenhouse. For an installation guide, see the Carlos Device (Raspberry Pi) page. This project defines a couple of supported sensors and actuators, but you can easily extend the project to support your own devices to provide the required data to the server.</p> <p>The intended setup is to have the Carlos Server deployed in the cloud and the Carlos Device running locally in the greenhouse. But nothing stops you from running the Carlos Server on a Raspberry Pi as well if you have access to the Raspberry Pi within your home network.</p>"},{"location":"installation/device/","title":"Carlos Device (Raspberry Pi)","text":"<p>This guide will explain how to setup a fresh Raspberry Pi. I'm using a  Raspberry Pi 3 Model B but you are free to use any other model, that supports your requirements.</p> <p>Well choose the Raspberry Pi OS Lite (64-bit) - Headless version, because we won't be needing the overhead of a desktop environment.</p> <p>Once you have flashed the image to your SD card, you can boot up the Raspberry Pi and  start the setup by running the following commands:</p> <pre><code>sudo raspi-config\n</code></pre> <p>Well configure the following settings:</p> <p>1 System Options</p> <ul> <li>S1 Wireless LAN: Configure Wifi to your needs.</li> <li>S5 Boot / Auto Login<ul> <li>Select <code>B1 Console Autologin</code> - Otherwise it will be impossible to run the carlos device without a monitor and keyboard.</li> </ul> </li> </ul> <p>3 Interface Options</p> <ul> <li>I4 I2C: Activate - We will use I2C to communicate with the sensors.</li> </ul> <p>5 Localisation Options</p> <ul> <li>L2 Timezone</li> </ul> <p>Once the basic setup is done, we can start installing the required tools and dependencies:</p> <pre><code>sudo apt update # (1)\nsudo apt upgrade # (2)\nsudo apt install git # (3)\n</code></pre> <ol> <li>This command will update the local package repository.</li> <li>This command will install all available updates.</li> <li>This command will install the <code>git</code> tool, which we will use to clone the carlos repository.</li> </ol> <p>Check python version.</p> <pre><code>python3 --version\n</code></pre> <p>If your Python version is &lt;3.11 you'll need to upgrade it.</p> <p>This repository uses Poetry as dependency manager, thus we'll install it here as well:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 - # (1)\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc # (2)\nsource ~/.bashrc # (3)\n</code></pre> <ol> <li>This command will download and execute the official installation script.</li> <li>This command will add the poetry binary to the PATH.</li> <li>This command will reload the shell to make the changes take effect.</li> </ol> <p>To ensure that poetry is installed correctly, run the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Clone the carlos repository to the root of the device:</p> <pre><code>git clone https://github.com/flxdot/carlos.git ~/carlos\n</code></pre> <p>Install the virtual environment and dependencies:</p> <pre><code>cd ~/carlos/services/device\npoetry install --without dev\n</code></pre> <p>We are now done with the installation of the device.</p> <p>Register the device as a service:</p> <pre><code>sh install-service.sh\n</code></pre>"},{"location":"installation/device/#configuration","title":"Configuration","text":"<p>Configure the device by invoking the following command:</p> <pre><code>make config\n</code></pre>"},{"location":"installation/peripherals/","title":"Carlos Device Peripherals","text":"<p>Carlos expects to have at least the following information available from your greenhouse:</p> <ul> <li>Temperature</li> <li>Humidity</li> </ul> <p>Carlos controls your greenhouse by activating relays to open/close valves, start pumps, etc.</p>"},{"location":"installation/server/","title":"Carlos Server (Linux)","text":"<p>This guide will explain how to setup a fresh Debian 12 server. But you are free to use any other Linux distribution or even a Windows server. But keep in mind that the commands and paths may differ.</p> <p>To keep the maintenance effort minimal we only require and rely on:</p> <ul> <li><code>git</code> is used to clone the carlos repository and therefore allow us to update the server easily.</li> <li><code>docker</code> and <code>docker-compose</code> are used to run the carlos server without the need to install any dependencies on the host system.</li> <li><code>cron</code> is used to automatically renew the SSL certificates.</li> <li><code>ufw</code> is used to manage the firewall and to allow HTTP and HTTPS connections.</li> </ul> <p>We install all tools by running the following commands:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install git docker.io docker-compose cron ufw\n</code></pre> <p>Next we configure our server to accept HTTP and HTTPS connections.</p> <pre><code>sudo ufw allow 80/tcp comment 'accept HTTP connections'\nsudo ufw allow 443/tcp comment 'accept HTTPS connections'\n</code></pre> <p>Now you are ready to clone the carlos repository in the root of your server. If you decide to clone the repository in a different directory, make sure to adjust the paths in the <code>docker-compose.yml</code> files as well as all follwing scripts.</p> <pre><code>git clone https://github.com/flxdot/carlos.git /carlos\n</code></pre> <p>Before we can start the carlos server we need to provide it with some configuration parameters in the <code>.env</code> file in the root of the repository:</p> <pre><code>cp /carlos/.env.example /carlos/.env\n# edit the .env file with your favorite editor\nvi /carlos/.env\n</code></pre> <p>As a last step we run the installation script that will configure certbot and nginx to serve the carlos server over HTTPS.</p> <pre><code>sh /carlos/deployment/server/install.sh your-domain.com your-email@provider.com\n</code></pre> <p>Your server is now running and you can access it by visiting <code>https://your-domain.com</code>.</p>"},{"location":"usage/","title":"How to use the Carlos app","text":""}]}